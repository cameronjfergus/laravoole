#!/usr/bin/env php
<?php

$composer_installed = false;

foreach (array(__DIR__ . '/../../autoload.php', __DIR__ . '/../vendor/autoload.php', __DIR__ . '/vendor/autoload.php') as $file) {
    if (file_exists($file)) {
        $composer_installed = $file;

        break;
    }
}

if ($composer_installed === false) {
    fwrite(STDERR,
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );

    die(1);
}

define('COMPOSER_INSTALLED', $composer_installed);

main();

function main()
{
    global $argc, $argv;
    if ($argc <= 1) {
        if (posix_isatty(STDIN)) {
            echo 'Laravoole by Garveen' . PHP_EOL;
            echo PHP_EOL;
            echo 'Usage:' . PHP_EOL;
            echo ' laravoole start | stop | reload | restart | quit' . PHP_EOL;
            echo PHP_EOL;
        } else {
            $input = file_get_contents('php://stdin');
            spl_autoload_register(function ($class) {
                if (is_file($file = __DIR__ . '/src/' . substr(strtr($class, '\\', '/'), 10) . '.php')) {
                    require $file;
                }
            });
            $configs = unserialize($input);

            $argv = $configs['argv'];
            $server = new Laravoole\Server($configs['mode']);
            $server->start(
                $configs['host'],
                $configs['port'],
                $configs['pid_file'],
                $configs['root_dir'],
                $configs['handler_config'],
                $configs['wrapper_config']
            );

        }
    } else {

        require COMPOSER_INSTALLED;

        $app = require dirname(COMPOSER_INSTALLED) . '/../bootstrap/app.php';

        $kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
        $kernel->bootstrap();

        switch ($argv[1]) {
            case 'start':
                start();
                break;
            case 'restart':
                $pid = sendSignal(SIGTERM);
                $time = 0;
                while (posix_getpgid($pid) && $time <= 10) {
                    usleep(100000);
                    $time++;
                }
                if ($time > 100) {
                    echo 'timeout' . PHP_EOL;
                    exit(1);
                }
                start();
                break;
            case 'stop':
            case 'quit':
            case 'reload':
            case 'reload_task':

                $map = [
                    'stop' => SIGTERM,
                    'quit' => SIGQUIT,
                    'reload' => SIGUSR1,
                    'reload_task' => SIGUSR2,
                ];
                sendSignal($map[$argv[1]]);
                break;

        }
    }
}

function sendSignal($sig)
{
    if ($pid = getPid()) {

        posix_kill($pid, $sig);
    } else {

        echo "not running!" . PHP_EOL;
        exit(1);
    }
}
function getPid()
{

    $pid_file = config('laravoole.base_config.pid_file');
    if (file_exists($pid_file)) {
        $pid = file_get_contents($pid_file);
        if (posix_getpgid($pid)) {
            return $pid;
        } else {
            unlink($pid_file);
        }
    }
    return false;
}

function start()
{
    if (getPid()) {
        echo 'already running' . PHP_EOL;
        exit(1);
    }

    $mode = config('laravoole.base_config.mode');
    if (!$mode) {
        echo "Laravoole needs Swoole or Workerman." . PHP_EOL .
            "You can install Swoole by command:" . PHP_EOL .
            " pecl install swoole" . PHP_EOL .
            "Or you can install Workerman by command:" . PHP_EOL .
            " composer require workerman/workerman" . PHP_EOL;
        exit;
    }

    $wrapper = "Laravoole\\Wrapper\\{$mode}Wrapper";

    foreach ([
        'handler_config' => $wrapper::getParams(),
    ] as $config_name => $params) {
        $$config_name = [];
        foreach ($params as $paramName => $default) {
            if (is_int($paramName)) {
                $paramName = $default;
                $default = null;
            }
            $key = $paramName;
            $value = config("laravoole.{$config_name}.{$key}", function () use ($key, $default) {
                return env("LARAVOOLE_" . strtoupper($key), $default);
            });
            if ($value !== null) {
                if ((is_array($value) || is_object($value)) && is_callable($value)) {
                    $value = $value();
                }
                $$config_name[$paramName] = $value;
            }
        }

    }

    if (!strcasecmp('SwooleFastCGI', $mode)) {
        $handler_config['dispatch_mode'] = 2;
    }

    global $argv;
    $configs = [
        'host' => config('laravoole.base_config.host'),
        'port' => config('laravoole.base_config.port'),
        'mode' => config('laravoole.base_config.mode'),
        'pid_file' => config('laravoole.base_config.pid_file'),
        'root_dir' => config('laravoole.base_config.root_dir'),
        // for swoole / workerman
        'handler_config' => $handler_config,
        // for wrapper, like http / fastcgi / websocket
        'wrapper_config' => config('laravoole.wrapper_config'),
        'argv' => $argv,
    ];

    $handle = popen('/usr/bin/env php ' . __FILE__, 'w');
    fwrite($handle, serialize($configs));
    fclose($handle);

}
