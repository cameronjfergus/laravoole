#!/usr/bin/env php
<?php

$composer_installed = false;

foreach (array(__DIR__ . '/../../autoload.php', __DIR__ . '/../vendor/autoload.php', __DIR__ . '/vendor/autoload.php') as $file) {
    if (file_exists($file)) {
        $composer_installed = $file;

        break;
    }
}

if ($composer_installed === false) {
    fwrite(STDERR,
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );

    die(1);
}

define('COMPOSER_INSTALLED', $composer_installed);

main($argc, $argv);

function main($argc, $argv)
{
    if ($argc <= 1) {
        if (posix_isatty(STDIN)) {
            echo 'Laravoole by Garveen' . PHP_EOL;
            echo  PHP_EOL;
            echo 'Usage:' . PHP_EOL;
            echo ' laravoole start | stop | reload | restart | quit' . PHP_EOL;
            echo  PHP_EOL;
        } else {
            $input = file_get_contents('php://stdin');
            spl_autoload_register(function($class) {
                if(is_file($file = __DIR__ . '/src/' . substr(strtr($class, '\\', '/'), 10) . '.php')) {
                    require $file;
                } else {
                    throw new Exception("file not found", 1);

                }
            });
            $construct_config = unserialize($input);

            $server = "Laravoole\\{$construct_config['config']['mode']}";

            $server::start($construct_config['config'], $construct_config['laravoole_settings']);

        }
    } else {

        require COMPOSER_INSTALLED;

        $app = require dirname(COMPOSER_INSTALLED) . '/../bootstrap/app.php';

        $kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
        $kernel->bootstrap();

        switch ($argv[1]) {
            case 'start':
                start();
                break;
            case 'restart':
                $pid = sendSignal(SIGTERM);
                $time = 0;
                while (posix_getpgid($pid) && $time <= 10) {
                    usleep(100000);
                    $time++;
                }
                if ($time > 100) {
                    echo 'timeout' . PHP_EOL;
                    exit(1);
                }
                start();
                break;
            case 'stop':
            case 'quit':
            case 'reload':
            case 'reload_task':

                $map = [
                    'stop' => SIGTERM,
                    'quit' => SIGQUIT,
                    'reload' => SIGUSR1,
                    'reload_task' => SIGUSR2,
                ];
                sendSignal($map[$argv[1]]);
                break;

        }
    }
}

function sendSignal($sig)
{
    if ($pid = getPid()) {

        posix_kill($pid, $sig);
    } else {

        echo "not running!" . PHP_EOL;
        exit(1);
    }
}
function getPid()
{

    $pid_file = getPidFile();
    if (file_exists($pid_file)) {
        $pid = file_get_contents($pid_file);
        if (posix_getpgid($pid)) {
            return $pid;
        } else {
            unlink($pid_file);
        }
    }
    return false;
}

function getPidFile()
{
    static $pid_file = false;
    if ($pid_file === false) {

        $app = app();
        $pid_file = env('LARAVOOLE_PID_FILE', $app->storagePath() . '/logs/laravoole.pid');
    }
    return $pid_file;

}
function start()
{
    if (getPid()) {
        echo 'already running' . PHP_EOL;
        exit(1);
    }

    $mode = env('LARAVOOLE_MODE', 'Http');
    $reflection = new ReflectionClass("Laravoole\\$mode");
    $wrapper = $reflection->getConstant('WRAPPER');
    $params = $wrapper::PARAMS;

    $settings = [];
    foreach ($params as $param) {
        $key = 'LARAVOOLE_' . strtoupper($param);
        $value = env($key);
        if ($value !== null) {
            $settings[$param] = $value;
        }
    }

    $defaults = [
        'log_file' => function () {return app()->storagePath() . '/logs/laravoole.log';},
        'daemonize' => 1,
        'max_request' => 2000,
    ];
    foreach ($defaults as $key => $value) {
        if (!isset($settings[$key])) {
            $settings[$key] = value($value);
        }
    }

    if(strcasecmp('fastcgi', $mode = env('LARAVOOLE_MODE', 'Http'))) {
        $settings['dispatch_mode'] = 2;
    }

    $construct_config = [
        'config' => [
            'host' => env('LARAVOOLE_HOST', '127.0.0.1'),
            'port' => env('LARAVOOLE_PORT', 9050),
            'pid_file' => getPidFile(),
            'root_dir' => base_path(),
            'deal_with_public' => env('LARAVOOLE_DEAL_WITH_PUBLIC', false),
            'gzip' => env('LARAVOOLE_GZIP', 1),
            'gzip_min_length' => env('LARAVOOLE_GZIP_MIN_LENGTH', 1024),
            'mode' => env('LARAVOOLE_MODE', 'Http'),
        ],
        'laravoole_settings' => $settings,
    ];

    $handle = popen('/usr/bin/env php ' .__FILE__, 'w');
    fwrite($handle, serialize($construct_config));
    fclose($handle);

}
